{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","state","event","console","log","target","value","this","onSearchChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74274d6e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    const cardComponent = robots.map((user, i) => {\n        return (\n            <Card\n                key={i}\n                id={robots[i].id}\n                name={robots[i].name}\n                email={robots[i].email}\n            />\n        );\n    });\n    return <div>{cardComponent}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"tc pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","export const robots = [\n    {\n        id: 1,\n        name: 'Kristian Poslek',\n        username: 'Liebe<3',\n        email: 'Kristian69@gmail.com'\n    },\n    {\n        id: 2,\n        name: 'Sylvia Merget',\n        username: 'Merget',\n        email: 'merget.sy@gmail.com'\n    },\n    {\n        id: 3,\n        name: 'Michael Fecher',\n        username: 'Boogeyman',\n        email: 'Fecher.Michael@gmail.com'\n    },\n    {\n        id: 4,\n        name: 'Antoaneta Sarico',\n        username: 'Chris',\n        email: 'Antoaneta@salorico.com'\n    },\n    {\n        id: 5,\n        name: 'Cecilia Gerhardt',\n        username: 'Niko',\n        email: 'Gerhardt.Cec@gmail.com'\n    },\n    {\n        id: 6,\n        name: 'Georg Bildstein',\n        username: 'Anke',\n        email: 'Bildstein.georg@gmail.com'\n    },\n    {\n        id: 7,\n        name: 'Tommy Roth',\n        username: 'Comic',\n        email: 'Tommy@roth.com'\n    },\n    {\n        id: 8,\n        name: 'Ivana Malenica',\n        username: 'Ante',\n        email: 'ivana.malenica@gmail.com'\n    },\n    {\n        id: 9,\n        name: 'Simone Dougalis',\n        username: 'Lerdi',\n        email: 'Simonedede@gmail.com'\n    },\n    {\n        id: 10,\n        name: 'Nancy Yuxel',\n        username: 'Nagy',\n        email: 'Nancy.yuxel@gmail.com'\n    },\n    {\n        id: 11,\n        name: 'Tobias Haase',\n        username: 'Laura',\n        email: 'tobias.haase@gmail.com'\n    },\n    {\n        id: 12,\n        name: 'Linda Kukic',\n        username: 'Ivana',\n        email: 'Kukic.linda@gmail.com'\n    },\n    {\n        id: 13,\n        name: 'Alex Hanes',\n        username: 'Hund123',\n        email: 'alex@hanes.com'\n    },\n    {\n        id: 14,\n        name: 'Emil Zendeli',\n        username: 'Goga69',\n        email: 'emil.zen@gmail.com'\n    },\n    {\n        id: 15,\n        name: 'Inge Carter',\n        username: 'Bsball',\n        email: 'Inge@carter.com'\n    },\n    {\n        id: 16,\n        name: 'Denis Lange',\n        username: 'Danny',\n        email: 'denis@lange.com'\n    },\n    {\n        id: 17,\n        name: 'Erwin Howell',\n        username: 'Antonette',\n        email: 'erwin.how@gmail.com'\n    },\n    {\n        id: 18,\n        name: 'Melisa Bauch',\n        username: 'Bier',\n        email: 'Bauch.melisa@gmail.com'\n    },\n    {\n        id: 19,\n        name: 'Marina Gudovic',\n        username: 'Pavle',\n        email: 'maca.gudovic@gmail.com'\n    },\n    {\n        id: 20,\n        name: 'Lucy Trtani',\n        username: 'Viktor',\n        email: 'Lucy.trtani@gmail.com'\n    }\n];\n","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { robots } from './robots';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: robots,\n            searchfield: ''\n        };\n    }\n    onSearchChange(event) {\n        console.log(event.target.value);\n    }\n    render() {\n        return (\n            <div className=\"tc\">\n                <h1>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <CardList robots={this.state.robots} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}